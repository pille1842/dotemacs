#+TITLE: GNU Emacs operating system settings
#+AUTHOR: Eric Haberstroh
#+EMAIL: gpg@erixpage.de
#+OPTIONS: toc:nil
#+MACRO: export-date (eval (format-time-string "%F %R %z" (current-time)))
#+MACRO: emacs-development-version (eval (substring (emacs-version) 0 14))
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>

- Created: 2021-03-31.
- Updated: *{{{export-date}}}*.
- Emacs Version: {{{emacs-development-version}}}.
- File history: https://github.com/pille1842/dotemacs/commits/conf21

  #+TOC: headlines 8 insert TOC here, with eight headline levels

* Overview
** Canonical links to this document
- HTML version :: [[http://www.erixpage.de/dotemacs]]
- Git repository :: [[https://github.com/pille1842/dotemacs]]

** What is this?
This document, referred to in the source code as =erix-emacs.org=, contains most of my configurations for GNU Emacs. In its structure it is heavily influenced by Protesilaos Stavrou's well-documented and beautifully presented [[https://protesilaos.com/dotemacs][Emacs configuration]]. Its contents also frequently borrow from "Prot", but I have been equally inspired by the System Crafters YouTube series [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch]], a repository of which can be found on [[https://github.com/daviwil/emacs-from-scratch][GitHub]].

My Emacs configuration is designed using the principles of literate programming. Each section not only contains the code that will automatically produce the actual Emacs configuration file, but it also contains additional information, links to sources, annotations and comments to make this document a more useful resource for its human readers.

This document is written using Orgmode. When starting Emacs, a =erix-emacs.el= file is automatically produced and loaded, containing all the Emacs Lisp source code blocks in this file. Another initialization file exists for the sole purpose of bootstrapping this document.

** General design considerations
This configuration relies mainly on the [[https://github.com/jwiegley/use-package][use-package]] macro which makes creating a reproducible and consistent configuration much easier. This document lays out which packages are needed for a fully configured Emacs, and how each of these packages should in turn be fine-tuned to my liking. Use-package will ensure that all these packages are actually installed on the system from which this configuration is run.

This configuration has been tested on the following system:

#+begin_src emacs-lisp :tangle no :exports results
  (format "System type:   %s\nOS release:    %s\nEmacs version: %s"
          system-type
          operating-system-release
          emacs-version)
#+end_src

#+RESULTS:
: System type:   gnu/linux
: OS release:    5.8.0-48-generic
: Emacs version: 27.1

** Contents of my init.el
These are the contents of =init.el=, which is responsible for tangling (i.e. extracting the source code blocks from) and loading this document.

#+include: init.el src emacs-lisp :tangle no

** Copying
Copyright (C) 2021 Eric Haberstroh <[[mailto:gpg@erixpage.de][gpg@erixpage.de]]>

This file is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This file is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this file. If not, see <[[http://www.gnu.org/licenses/]]>.

* Custom file
Instead of appending customizations done via the custom interface to =init.el=, I would like Emacs to put them into a separate file. This file will be loaded at the end of this configuration to override any settings done via Lisp.

#+begin_src emacs-lisp
  (custom-set-default 'custom-file (concat user-emacs-directory "custom.el"))
#+end_src

* Interface
This section adapts the Emacs interface to be less cluttered and to look cleaner and, arguably, more beautiful than what the default Emacs experience provides for.

** Clean up the UI
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (setq visible-bell t
        inhibit-splash-screen t
        frame-title-format '(multiple-frames "%b"
                                             "Emacs"))
#+end_src

** Cursor type
There are a few shapes available for the cursor in Emacs:

- =box= (which is the default)
- =hollow= (a hollow box)
- =bar= (a vertical bar)
- =hbar= (a horizontal bar)
- =nil= (no cursor at all).

No cursor at all seems a little too minimalistic, so the =bar= type is used instead. You can actually set the cursor for each individual buffer via the buffer-local variable =cursor-type=, but for consistency, the same cursor shape will be used throughout.

#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
#+end_src

** Font
[[https://github.com/tonsky/FiraCode][Fira Code]] is a free monotype font containing ligatures for common programming multi-character combinations. To prepare for the terrible case that Fira Code is not installed on the system, an additional check is performed using the =fc-list= program which should be in your PATH.

#+begin_src emacs-lisp
  (defun erix-font-installed-p (font)
    "Return t if the given FONT is installed on the system, nil otherwise.

  This works by calling the fc-list program to search for fonts
  matching the given pattern."
    (not
     (string= ""
              (shell-command-to-string
               (concat "fc-list "
                       (shell-quote-argument font))))))

  (defvar erix-default-font-name "Fira Code Retina" "Default font name")
  (defvar erix-default-font-size 120 "Default font size")

  (when (erix-font-installed-p erix-default-font-name)
    (set-face-attribute
     'default nil
     :font erix-default-font-name
     :height erix-default-font-size))
#+end_src

*** Ligatures

In typography, a ligature occurs when two or more graphemes or letters are joined as a single glyph. One defining feature of Fira Code is that it contains ligatures for grapheme groups commonly used in various programming languages. There is a package to make this feature work in Emacs. The minor mode will be enabled in all =prog-mode= buffers. This is taken from the [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][Fira Code Emacs instructions]].

#+begin_src emacs-lisp
  (use-package fira-code-mode
    :hook prog-mode)
#+end_src

** Theme
[[https://draculatheme.com/][Dracula]] is a theme available for many applications, including various terminal emulators, vim, Visual Studio Code, and Emacs.

This is a probably a pretty wasteful way to use Dracula in Emacs: It is part of the [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] package (together with a gazillion others that will go unused).

#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-dracula t))
#+end_src

*** Screenshot
Here is a screenshot of the init.el file in this repository, rendered in the Dracula theme:

[[./screenshot-dracula.png]]

* Networking and TRAMP
TRAMP stands for "Transparent Remote (file) Access, Multiple Protocol". This package provides remote file editing, similar to Ange FTP, which will also be configured slightly in this section. You can find out more about TRAMP in the [[info:tramp#Top][manual]].

TRAMP is called "transparent" because it handles all the "remote" parts of accessing a particular file. To the rest of Emacs, a file accessed through TRAMP looks just like any other file. Here's an example: To edit a file =/path/to/file.txt= on a machine accessible through SSH, e.g. on =remotehost=, you simply type the following command:

#+begin_src text :tangle no
  C-x C-f /remotehost:/path/to/file.txt RET
#+end_src

As you can see, you can use the usual =find-file= command to access a remote path. The default method is "scp", but "ssh" is actually faster, so the first thing to do is to set "ssh" as TRAMP's default access method.

#+begin_src emacs-lisp
  (customize-set-variable 'tramp-default-method "ssh")
#+end_src

** Inline methods
TRAMP can also be used with other protocols than SSH or SCP. Some of these are called "inline methods" because all the necessary communication is handled directly within Emacs. Some of these are:

- rsh (insecure, use SSH instead)
- telnet (insecure, use SSH instead)
- su / *sudo* (for accessing files with the permissions of another user on the system)

The sudo method is particularly interesting since it allows you to edit files only accessible as root directly in your current Emacs session, without starting Emacs as root or hopping into a terminal. To edit the contents of =/etc/passwd=, simply type:

#+begin_src text :tangle no
  C-x C-f /sudo::/etc/passwd RET
#+end_src

TRAMP will prompt you for the password of =root@yourhost=, possibly right after typing =/sudo::=. This prompt is misleading, since what you're actually being prompted for is your own password, at least on a modern Linux system where you are part of the "sudoers" and can execute commands as root with your own credentials.

Another thing to note are the two colons after "sudo". Why two? Well, the generic syntax for TRAMP paths is:

#+begin_src text :tangle no
  /method:user@host:/path/to/file
#+end_src

In the case of sudo on the local machine, you don't actually need to specify any user or host, so to indicate that you're skipping that part of the path, type another colon to get to the =/path/to/file= part.

** External methods
In addition to methods built right into Emacs, TRAMP can use external programs to access remote files. Some of these are:

- rcp (insecure, use scp instead)
- scp (uses a combination of ssh to connect and scp to transfer files)
- rsync
- sudoedit (implemented slightly more secure than the inline sudo method)
- smb (for accessing files on Samba or MS Windows servers)
- *ftp*

The ability to access files via FTP is particularly useful in a web development setting. TRAMP uses an external FTP program to handle this.

** Authentication
When you're accessing files on other computers, you might want to think about how you'll be authenticating to these machines. In the case of SSH, you might have your public SSH key copied to another machine so you can login without entering your password (although you might be prompted for a passphrase if you have encrypted your private SSH key).

But what about FTP, for example? TRAMP can use information stored in an encrypted file in your home directory to figure out which combination of user and password to use for a particular path. This file is generally stored in =~/.authinfo.gpg=. Emacs can transparently decrypt this file and look up credentials for particular machines. The general layout of this file is this:

#+begin_src text :tangle no
  machine HOST#PORT port PROTOCOL login USERNAME%DOMAIN password SECRET
#+end_src

A quick tour through the parameters written in all-caps:

- HOST#PORT :: You can of course omit the #PORT part and just specify a host, e.g. =example.com=.
- PROTOCOL :: This can be any protocol supported by TRAMP as listed above, e.g. =ftp=.
- USERNAME%DOMAIN :: Again, you can omit the domain part, particularly for protocols that don't care about domains, but for connecting to Samba / MS Windows servers, this might be important.
- SECRET :: The password used to authenticate the given USER on the other machine.

Here's a quick example storing credentials for user "test1" on the FTP server "mymachine.org":

#+begin_src text :tangle no
  machine mymachine.org port ftp login test1 password hunter3
#+end_src

If TRAMP can't find a particular combination of hostname and username in your authinfo file, it will prompt for a password interactively.

There are two variables we need to customize in order to properly use =~/.authinfo.gpg= as the path to our encrypted authentication file. =auth-sources= stores a list of files TRAMP may consult to obtain credentials. For FTP, since work is offloaded to the Ange FTP package, an additional setting in =ange-ftp-netrc-filename= is required, pointing to the same path.

#+begin_src emacs-lisp
  (customize-set-variable 'auth-sources '("~/.authinfo.gpg"))
  (customize-set-variable 'ange-ftp-netrc-filename "~/.authinfo.gpg")
#+end_src

* Auto-exporting this configuration
When saving this file, it will be automatically exported as =erix-emacs.html= and uploaded to my website.

This depends on the value of =erix-emacs-config-html-target= being correctly set to the FTP target path (see the section on [[*Networking and TRAMP][Networking and TRAMP]]). This will be done in =private.el=, a file loaded right before =custom.el=, but not checked into the repository for security reasons.

#+begin_src emacs-lisp
  (defcustom erix-emacs-config-html-target nil
    "Location where erix-emacs.html will be copied after exporting it.")

  (defun erix-export-emacs-config ()
    "When the current buffer is the Emacs configuration file
  erix-emacs.org, export it as an HTML file and upload it to a
  location designated by `erix-emacs-config-html-target'."
    (when (string= (erix-emacs--expand-file-name erix-emacs-configuration-main-file
                                                 ".org")
                   (buffer-file-name))
      (org-html-export-to-html)
      (when erix-emacs-config-html-target
        (copy-file (expand-file-name "erix-emacs.html" user-emacs-directory)
                   erix-emacs-config-html-target
                   t))))

  (add-hook 'after-save-hook #'erix-export-emacs-config)
#+end_src

* Rest of the configuration (for now)

#+begin_src emacs-lisp
  ;; doom-modeline
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :custom
    ((doom-modeline-height 15)))

  ;; Line numbers, column numbers and current line
  (global-display-line-numbers-mode 1)
  (column-number-mode 1)
  (global-hl-line-mode 1)

  ;; Rainbow delimiters (colorful parentheses)
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  ;; No line numbers in certain modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))

  ;; Smooth scrolling (keep more context when moving the cursor)
  (use-package smooth-scrolling
    :init
    (smooth-scrolling-mode 1))

  ;; Completion framework
  (use-package ivy
    :init
    (ivy-mode 1))

  ;; Enhanced versions of common Emacs commands
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-h b" . counsel-descbinds)
           ("C-h a" . counsel-apropos)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  ;; More annotations in completion lists
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; Swiper for text search
  (use-package swiper
    :bind (("C-s" . swiper)
           ("C-r" . swiper-backward)))

  ;; which-key for discoverability
  (use-package which-key
    :init
    (which-key-mode 1))

  ;; Better Emacs *Help* buffer
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :config
    (setq find-function-C-source-directory "~/Code/emacs-27.1/src"))

  ;; Orgmode
  (defun eh/org-mode-setup ()
    "Set up various things for Orgmode buffers"
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun eh/org-font-setup ()
    "Set up font rendering in Orgmode buffers"
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

     ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "DejaVu Sans" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :ensure org-plus-contrib
    :hook (org-mode . eh/org-mode-setup)
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    (setq org-ellipsis " ▾")
    (eh/org-font-setup)
    (setq org-agenda-files '("~/org"))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (ledger . t)
       (python . t)
       (shell . t))))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun eh/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . eh/org-mode-visual-fill))

  ;; Project management
  (use-package projectile
    :config
    (projectile-mode 1)
    :custom
    ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Code")
      (setq projectile-project-search-path '("~/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)

  ;; Treemacs
  (use-package treemacs
    :bind
    (("M-0" . treemacs-select-window)
     ("C-x t 1" . treemacs-delete-other-windows)
     ("C-x t t" . treemacs)
     ("C-x t B" . treemacs-bookmark)
     ("C-x t C-t" . treemacs-find-file)
     ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after (treemacs magit))

  ;; Development

  ;; Enable electric-pair-mode in all prog-mode buffers
  (add-hook 'prog-mode-hook 'electric-pair-mode)

  ;; Language Server Protocol (LSP)
  (use-package lsp-mode
    :hook ((php-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :init
    (setq lsp-keymap-prefix "C-c x"))

  ;; LSP enhancements
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; PHP
  (use-package php-mode)

  ;; Use <pause> key to save the current buffer
  (global-set-key (kbd "<pause>")
                  'save-buffer)

#+end_src

* Load the private file
Some settings are better not kept under public version control. For this purpose, a "private file" called =~/.emacs.d/private.el= can be used, which will be loaded at this point.

#+begin_src emacs-lisp
  (let ((private-file (expand-file-name "private.el" user-emacs-directory)))
    (when (file-exists-p private-file)
      (load private-file)))
#+end_src

* Load the custom file
As promised [[*Custom file][above]], load the custom file at the end of this configuration.

#+begin_src emacs-lisp
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
